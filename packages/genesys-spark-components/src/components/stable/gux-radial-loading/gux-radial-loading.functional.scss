@use 'sass:math';

$largeSpinnerSize: 48; // Linked to --gse-ui-progressAndLoading-spinner-large
$largeSpinnerBorder: 4; // Linked to --gse-ui-progressAndLoading-largeBorder

$smallSpinnerSize: 16; // Linked to --gse-ui-progressAndLoading-spinner-small
$smallSpinnerBorder: 2; // Linked to --gse-ui-progressAndLoading-smallBorder

$thinSpinnerBorder: 2; // Linked to --gse-ui-progressAndLoading-smallBorder

$largeCircumference: (math.$pi * ($largeSpinnerSize - $largeSpinnerBorder));
$smallCircumference: (math.$pi * ($smallSpinnerSize - $smallSpinnerBorder));
$largeThinCircumference: (math.$pi * ($largeSpinnerSize - $thinSpinnerBorder));

@mixin spin($name, $circumference) {
  @keyframes #{$name}Spin {
    0% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(0deg);
    }

    7.5% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(0deg);
    }

    20% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(90deg);
    }

    30% {
      stroke-dasharray: math.div($circumference, 4);
      transform: rotate(180deg);
    }

    40% {
      stroke-dasharray: math.div($circumference, 4);
    }

    50% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(450deg);
    }

    57.5% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(450deg);
    }

    70% {
      stroke-dasharray: math.div($circumference, 4);
      transform: rotate(540deg);
    }

    80% {
      stroke-dasharray: math.div($circumference, 4);
      transform: rotate(630deg);
    }

    90% {
      stroke-dasharray: math.div($circumference, 4);
    }

    100% {
      stroke-dasharray: 1 math.div($circumference, 2) - 1;
      transform: rotate(900deg);
    }
  }
}

@include spin('large', $largeCircumference);
@include spin('small', $smallCircumference);
@include spin('largeThin', $largeThinCircumference);

@mixin gux-spinner-state-style {
  div[role='progressbar'] {
    .gux-svg-container {
      display: block;
      inline-size: var(--gse-ui-progressAndLoading-spinner-large);
      block-size: var(--gse-ui-progressAndLoading-spinner-large);

      .gux-dynamic-circle,
      .gux-dynamic-circle-mask {
        fill: none;
        stroke: var(--gse-ui-progressAndLoading-spinner-foreground);
        stroke-width: $largeSpinnerBorder;
        transform-origin: 50% 50%;
        animation-name: largeSpin;
        animation-duration: 2s;
        animation-timing-function: linear;
        animation-iteration-count: infinite, infinite;
      }

      .gux-dynamic-circle-mask {
        display: none;
        stroke: white;
        stroke-width: $largeSpinnerBorder - $thinSpinnerBorder;
      }

      .gux-static-circle {
        fill: none;
        stroke: var(--gse-ui-progressAndLoading-spinner-base);
        stroke-width: $largeSpinnerBorder;
      }
    }

    &.gux-full-page {
      .gux-svg-container {
        .gux-dynamic-circle-mask {
          display: initial;
        }

        .gux-static-circle {
          display: none;
        }
      }
    }

    &.gux-input {
      .gux-svg-container {
        inline-size: var(--gse-ui-progressAndLoading-spinner-small);
        block-size: var(--gse-ui-progressAndLoading-spinner-small);

        .gux-dynamic-circle {
          fill: none;
          stroke: var(--gse-ui-progressAndLoading-spinner-foreground);
          stroke-width: $smallSpinnerBorder;
          transform-origin: 50% 50%;
          animation-name: smallSpin;
          animation-duration: 2s;
          animation-timing-function: linear;
          animation-iteration-count: infinite, infinite;
        }

        .gux-static-circle {
          stroke: var(--gse-ui-progressAndLoading-spinner-base);
          stroke-width: $smallSpinnerBorder;
        }
      }
    }
  }
}
